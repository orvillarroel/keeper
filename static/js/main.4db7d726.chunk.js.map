{"version":3,"sources":["components/Header.js","components/Footer.js","components/Note.js","notes.js","containers/CreateArea.js","containers/App.js","serviceWorker.js","index.js"],"names":["Header","Footer","Date","getFullYear","Note","title","content","id","deleteButton","className","onClick","notes","key","CreateArea","props","useState","item","setItem","isExpanded","setExpanded","handleForm","event","target","name","value","previous","placeholder","onChange","rows","Zoom","in","Fab","handleItem","preventDefault","App","notesDB2","setNotes","deleteNote","filter","index","noteList","map","n","Fragment","newNote","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OAMeA,EAFA,kBAAM,gCAAQ,4BAAI,kBAAC,IAAD,MAAJ,YCMdC,EAPA,WACd,OACC,gCAAQ,8CAAqB,IAAIC,MAAOC,iB,iBCU3BC,EAZF,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,MAAMC,EAA6B,EAA7BA,QAAQC,EAAqB,EAArBA,GAAGC,EAAkB,EAAlBA,aAC/B,OACC,yBAAKC,UAAU,QACd,4BAAKJ,GACL,2BAAIC,GACJ,4BAAQI,QAAS,kBAAIF,EAAaD,KAAK,kBAAC,IAAD,SCmB3BI,EA3BD,CACZ,CACEC,IAAK,EACLP,MAAO,aACPC,QACE,4GAEJ,CACEM,IAAK,EACLP,MAAO,QACPC,QACE,oHAEJ,CACEM,IAAK,EACLP,MAAO,SACPC,QACE,4EAEJ,CACEM,IAAK,EACLP,MAAO,wBACPC,QACE,2I,iDCkBSO,MAnCf,SAAoBC,GAAQ,IAAD,EACHC,mBAAS,CAACV,MAAO,GAAIC,QAAS,KAD3B,mBACnBU,EADmB,KACdC,EADc,OAEOF,oBAAS,GAFhB,mBAEnBG,EAFmB,KAERC,EAFQ,KAMpBC,EAAa,SAACC,GAAW,IAAD,EACRA,EAAMC,OAApBC,EADsB,EACtBA,KAAKC,EADiB,EACjBA,MAEZP,GAAQ,SAAAQ,GACP,OAAO,2BAAIA,GAAX,kBAAqBF,EAAOC,QAY7B,OACE,6BACE,0BAAMf,UAAU,eAEZS,EAAa,2BAAOK,KAAK,QAAQG,YAAY,QAAQF,MAAOR,EAAKX,MAAOsB,SAAUP,IAAgB,KAEpG,8BAAUG,KAAK,UAAUG,YAAY,iBAAiBE,KAAMV,EAAa,EAAI,EAAGM,MAAOR,EAAKV,QAASqB,SAAUP,EAAYV,QAAS,kBAAKS,GAAY,MACrJ,kBAACU,EAAA,EAAD,CAAMC,GAAIZ,GAAa,kBAACa,EAAA,EAAD,CAAKrB,QAdd,SAACW,GACrBP,EAAMkB,WAAWhB,GACjBC,EAAQ,CAACZ,MAAO,GAAIC,QAAS,KAE7Be,EAAMY,mBAUmD,kBAAC,IAAD,WC6B5CC,EAjCH,WAAO,IAAD,EACQnB,mBAAS,YAAIoB,IADrB,mBACVxB,EADU,KACJyB,EADI,KASXC,EAAa,SAAA9B,GAClB6B,GAAS,SAAAX,GACR,OAAOA,EAASa,QAAO,SAACtB,EAAKuB,GAAN,OAAeA,IAAQhC,SAK1CiC,EAAW7B,EAAM8B,KAAK,SAACC,EAAEH,GAAH,OAAY,kBAAC,EAAD,CAAM3B,IAAK2B,EAAOhC,GAAIgC,EAAOlC,MAAOqC,EAAErC,MAAOC,QAASoC,EAAEpC,QAASE,aAAc6B,OAEvH,OAGE,kBAAC,IAAMM,SAAP,KACC,kBAAC,EAAD,MACC,kBAAC,EAAD,CAAYX,WApBA,SAAAY,GACfR,GAAS,SAAAX,GACR,MAAM,CAAEmB,GAAR,mBAAmBnB,UAmBhBe,EACF,kBAAC,EAAD,QC5CgBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4db7d726.chunk.js","sourcesContent":["import React from 'react';\nimport HighlightIcon from '@material-ui/icons/Highlight';\n\n\nconst Header = () => <header><h1><HighlightIcon />Keeper</h1></header>\n\nexport default Header;","import React from 'react';\n\n\nconst Footer = () => {\n\treturn (\n\t\t<footer><p>Copyright &copy; {new Date().getFullYear()}</p></footer>\n\t);\n}\n\n\nexport default Footer;","import React from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nconst Note = ({title,content,id,deleteButton}) => {\n\treturn (\n\t\t<div className=\"note\">\n\t\t\t<h1>{title}</h1>\n\t\t\t<p>{content}</p>\n\t\t\t<button onClick={()=>deleteButton(id)}><DeleteIcon /></button>\n\t\t</div> \n\t\n\t);\n\n};\n\nexport default Note;","const notes = [\n  {\n    key: 1,\n    title: \"Delegation\",\n    content:\n      \"Q. How many programmers does it take to change a light bulb? A. None – It’s a hardware problem\"\n  },\n  {\n    key: 2,\n    title: \"Loops\",\n    content:\n      \"How to keep a programmer in the shower forever. Show him the shampoo bottle instructions: Lather. Rinse. Repeat.\"\n  },\n  {\n    key: 3,\n    title: \"Arrays\",\n    content:\n      \"Q. Why did the programmer quit his job? A. Because he didn't get arrays.\"\n  },\n  {\n    key: 4,\n    title: \"Hardware vs. Software\",\n    content:\n      \"What's the difference between hardware and software? You can hit your hardware with a hammer, but you can only curse at your software.\"\n  }\n];\n\nexport default notes;","import React, {useState} from \"react\";\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport Fab from '@material-ui/core/Fab';\nimport Zoom from '@material-ui/core/Zoom';\n\n\nfunction CreateArea(props) {\n\tconst [item,setItem] = useState({title: '', content: ''});\n\tconst [isExpanded,setExpanded] = useState(false);\n\n\t\n\t// Monitors and handles fields before form being submitted\n\tconst handleForm = (event) => {\n\t\tconst {name,value} = event.target;\n\n\t\tsetItem(previous => {\n\t\t\treturn {...previous,[name]: value};\n\t\t})\n\t\t\n\t};\n\n\tconst handleSubmit = (event) => {\n\t\tprops.handleItem(item);\n\t\tsetItem({title: '', content: ''});\n\n\t\tevent.preventDefault();\t\t//Stops form from actually being submitted and page reloaded\n\t}\n\n  return (\n    <div>\n      <form className=\"create-note\">\n        \n        { isExpanded ? <input name=\"title\" placeholder=\"Title\" value={item.title} onChange={handleForm}/> : null }\n        \n        <textarea name=\"content\" placeholder=\"Take a note...\" rows={isExpanded ? 3 : 1} value={item.content} onChange={handleForm} onClick={()=> setExpanded(true)}/>\n        <Zoom in={isExpanded} ><Fab onClick={handleSubmit}><AddBoxIcon/></Fab></Zoom>\n      </form>\n    </div>\n  );\n}\n\nexport default CreateArea;\n","import React, {useState} from 'react';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport Note from '../components/Note';\nimport notesDB2 from '../notes';\t\t\t// local DB of notes\nimport CreateArea from './CreateArea';\n\n\n/*\n\n\tName: Keeper\n\tDate: 07/22/20\n\tDesc: \n\t\tGoogle Notes Clone. Complete Dev Bootcamp\n\t\n\tDONE: Added to Github\n\n\tTODO:\n\t\t*Pin to the top\n\t\t*Sort Feauture\n\t\t*Labels / Categories\n\t\t** Fitlter by Labels\n\t\t** Hide certain notes from main list\n\t\t* Ability to add notes dynamically\n\t\t* Share notes to Social media or Email\n\t\t* Display / Rearrange \n\n\n*/\n\n\nconst App = () => {\n\tconst [notes,setNotes] = useState([...notesDB2]);\n\n\tconst addNote = newNote=>{\n\t\tsetNotes(previous=>{\n\t\t\treturn [newNote,...previous]\n\t\t});\n\t};\n\n\tconst deleteNote = id => {\n\t\tsetNotes(previous=>{\n\t\t\treturn previous.filter((item,index)=> index!==id);\n\t\t});\n\t}\n\n\t// old static notes\n\tconst noteList = notes.map( (n,index)=> <Note key={index} id={index} title={n.title} content={n.content} deleteButton={deleteNote}/> );\n\n\treturn (\n\t\t\t\n\n\t\t\t<React.Fragment>\n\t\t\t\t<Header />\n\t\t\t\t\t<CreateArea handleItem={addNote}/>\n\t\t\t\t\t{noteList}\n\t\t\t\t<Footer />\n\t\t\t</React.Fragment>\n\n\t\t);\n\t\n}\n\n\nexport default App\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"," import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n\n//1. Create a new React app.\n//2. Create a App.jsx component.\n//3. Create a Header.jsx component that renders a <header> element\n//to show the Keeper App name in an <h1>.\n//4. Create a Footer.jsx component that renders a <footer> element\n//to show a copyright message in a <p> with a dynamically updated year.\n//5. Create a Note.jsx component to show a <div> element with a\n//<h1> for a title and a <p> for the content.\n//6. Make sure that the final website is styled like the example shown here:\n//https://l1pp6.csb.app/\n\n//HINT: You will need to study the classes in teh styles.css file to appy styling.\n"],"sourceRoot":""}